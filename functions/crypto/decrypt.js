const q = require('qlik-sse');
var crypto = require('crypto');    // node.js crypto package

const functionConfig = {
    name: 'Decrypt',
    functionType: q.sse.FunctionType.SCALAR,
    returnType: q.sse.DataType.STRING,
    params: [
      {
      name: 'ciphertext',
      dataType: q.sse.DataType.STRING,
      },
      {
        name: 'passphrase',
        dataType: q.sse.DataType.STRING,
      }
    ],
  }
/**
 * Decrypt a value.
 * @function Decrypt
 * @param {string} ciphertext to decrypt, as generated by the Encrypt() function.
 * @param {string} passphrase to decrypt with.  This must be the same passphrase that was used in Encrypt().
 * @returns {string} unencrypted text.
 * @example
 * Decrypt(EncCreditCard, 'secret phrase')
 */
  const functionDefinition = function Decrypt(request) {
     request.on('data', (bundle) => {
      try {
        const rows = [];
        let result = 0;
        bundle.rows.forEach((row, index) => {
          rows.push({
            duals: [{ strData: DecryptText(row.duals[0].strData, row.duals[1].strData)}]
          });
        }); 
        request.write({
          rows
        });
      }
      catch (error) {
        console.log(error)
      }
  });
}

function DecryptText(text, passphrase) {
  // First 32 hex bytes of the text is the iv
  const iv = Buffer.from(text.substr(0,32), 'hex')
  const cipherText = Buffer.from(text.substr(32), 'hex')
  const key = passphrase.padEnd(32)  
  const decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);
  let ret = decipher.update(cipherText, 'hex', 'utf8')
  ret += decipher.final('utf8');
  return ret
}

module.exports = {
  functionDefinition,
  functionConfig
};